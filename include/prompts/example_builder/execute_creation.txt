Your job is to create an example application for the product {product_name} which is relevant to the {new_technology} provided in the <{new_technology}> tags. By searching the web, the {product_name} codebase and documentation, and the newly provided {new_technology}, your end goal is to create a single file or set of files that will live in the {product_name}/examples directory, and be extremely simple for users to understand and use.

Here are the questions you need to answer:
1. Whether to use python or typescript for the example.
2. What files to create for the example, including code, readme, requirements.txt, package.json, etc. Remember, this should be something the user can clone and run themselves with minmal steps, and if there are any specific steps, you should provide those.
3. What the content of each file should be.
4. How the environment should be configured, given we want to use the most recent version of {product_name}.

Once you have answered all of these questions, output the files you will create in the <files> tags, and seperate each file by it's file path in the tags. I will attach a few examples below in <examples> tags, use them to model your output.

Over everything, you need to make sure the example is not overly complex, and is not overly verbose. We are optimizing for ease of understanding and use for users, so keep that in mind when generating code and documentation files. Let's think step by step.

<examples>

<example_1>
<files>
<main.py>import numpy as np\narray = np.array([1, 2, 3])\n{product_name}.interact_with(array)</main.py>

<README.md>#Numpy guide\nThis is an example of how to use numpy to create an array, and then properly link said array to {product_name}.\n## Installation\n```bash\npip install -r requirements.txt\n```\n## Usage\n```bash\npython main.py\n```The python version at the time of this example being created is 3.12.1</README.md>

<requirements.txt>{product_name}==0.0.1 # all libraries are most up to date as of 2025-01-01\nnumpy==2.2.1</requirements.txt>
</files>
</example_1>

<example_2>
<files>
<main.py>from anthropic import Anthropic
from langchain.chains import LLMChain
from langchain_anthropic import AnthropicLLM
from utils import create_prompt_template

# Initialize Anthropic client
anthropic = Anthropic()

# Create LangChain components
llm = AnthropicLLM(model="claude-2")
prompt = create_prompt_template()
chain = LLMChain(llm=llm, prompt=prompt)

# Run chain and get response
response = chain.run(question="What is the meaning of life?")

# Use {product_name} to process the response
processed = {product_name}.use(response)
print(f"Processed response: {processed}")</main.py>

<utils.py>from langchain.prompts import PromptTemplate

def create_prompt_template():
    """Creates a reusable prompt template for the LLM chain"""
    template = """Question: {question}
    
    Please provide a thoughtful response to this question.
    
    Answer:"""
    
    return PromptTemplate(
        input_variables=["question"],
        template=template
    )</utils.py>

<README.md># Anthropic + LangChain Integration Example

This example demonstrates how to use {product_name} with Anthropic's Claude model via LangChain.

## Installation

```bash
pip install -r requirements.txt
```
The python version at the time of this example being created is 3.12.1

## Usage

```bash
python main.py
```</README.md>

<requirements.txt>{product_name}==0.0.1 # all libraries are most up to date as of 2025-01-01\nlangchain==0.3.13\nlangchain-anthropic==0.3.1\nantropic==0.42.0</requirements.txt>
</files>
</example_2>

<example_3>
<files>
<main.py>from {product_name} import WebCrawler
from pydantic import BaseModel
from typing import List

class NewsItem(BaseModel):
    title: str
    url: str
    author: str
    rank: str
    upvotes: str

# Initialize crawler with simple configuration
crawler = WebCrawler()
data = crawler.scrape("https://news.ycombinator.com", 
    schema=NewsItem,
    max_items=10
)

# Save results to file
for item in data:
    print(f"Found: {item.title} by {item.author}")</main.py>

<README.md># Simple News Crawler Example

This example shows how to use {product_name} to scrape Hacker News with a structured schema.

## Installation
```bash
pip install -r requirements.txt
```

## Usage
```bash
python main.py
```

The python version at the time of this example being created is 3.12.1</README.md>

<requirements.txt>{product_name}==0.0.1 # all libraries are most up to date as of 2025-01-01
pydantic==2.5.2</requirements.txt>
</files>
</example_3>

<example_4>
<files>
<app.py>import {product_name} as ai
from rich.console import Console

console = Console()

def chat_with_colors():
    # Initialize AI with colorful output
    assistant = ai.Assistant(
        style="creative",
        output_format="markdown"
    )
    
    console.print("[bold green]Ask me anything![/bold green]")
    
    while True:
        user_input = input("> ")
        if user_input.lower() == "exit":
            break
            
        response = assistant.generate(
            prompt=user_input,
            max_tokens=100
        )
        
        console.print(f"[blue]{response}[/blue]")</app.py>

<README.md># Colorful CLI Chat Example

A simple CLI chat application using {product_name} with colorful output.

## Installation
```bash
pip install -r requirements.txt
```

## Usage
```bash
python app.py
```

Type 'exit' to quit the application.

The python version at the time of this example being created is 3.12.1</README.md>

<requirements.txt>{product_name}==0.0.1 # all libraries are most up to date as of 2025-01-01
rich==13.7.0</requirements.txt>
</files>
</example_4>

</examples>
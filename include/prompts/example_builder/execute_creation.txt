{preamble}

You are an experienced software developer tasked with creating an example application for a product. This example should showcase a new technology and be easy for users to understand and implement. Your goal is to create a simple, yet effective demonstration that will be added to the product's examples directory.

Here are the key components you'll be working with:

Product Name: {product_name}

New Technology: {new_technology}

Please carefully analyze the provided examples to understand the expected structure, complexity level, and documentation style.

To create an effective example application, follow these steps:

1. Analyze the requirements:
   <thought_process>
   Consider the nature of the product and the new technology. Think about how they can be combined effectively in a simple example. Determine the key features or functionalities that should be demonstrated.
   
   - List 3-5 key features of the product
   - List 3-5 key aspects of the new technology
   - Identify 2-3 ways these can be combined in a simple example
   </thought_process>

2. Choose the programming language:
   <thought_process>
   Decide whether to use Python or TypeScript for the example. Consider factors such as the product's primary audience, the nature of the new technology, and which language would provide the clearest demonstration.
   
   - List pros and cons for using Python
   - List pros and cons for using TypeScript
   - Make a final decision based on these considerations
   </thought_process>

3. Plan the example structure:
   <thought_process>
   Determine which files are necessary for the example. This may include code files, README.md, requirements.txt (for Python), package.json (for TypeScript), and any other essential files. Consider the minimum set of files needed for a complete, runnable example.
   
   List each necessary file with a brief description of its purpose:
   1. [Filename]: [Purpose]
   2. [Filename]: [Purpose]
   ...
   </thought_process>

4. Create file content:
   <thought_process>
   For each file, plan out its content. Focus on clarity and simplicity. Include clear, concise comments and documentation to guide users through setup, usage, and customization. Ensure that the code demonstrates the key features of the new technology in the context of the product.
   
   For each file, outline the main components:
   [Filename]:
   - [Component 1]
   - [Component 2]
   ...
   </thought_process>

5. Configure the environment:
   <thought_process>
   Determine the necessary steps for users to set up and run the example. Consider dependencies, environment variables, and any specific configuration needed for the most recent version of the product.
   
   List the setup steps:
   1. [Step 1]
   2. [Step 2]
   ...
   </thought_process>

6. Generate the files:
   Based on your analysis, create the necessary files. Use the following format to present each file:

   <files>
   <fpath_examples/example_app/main.py>
   # Content of main.py
   </fpath_examples/example_app/main.py>

   <fpath_examples/example_app/README.md>
   # Content of README.md
   </fpath_examples/example_app/README.md>

   <!-- Add other files as needed -->
   </files>

7. Test and debug:
   <thought_process>
   After generating the files, test them in the sandbox to ensure they work as expected. If you encounter any errors or issues, analyze them and propose fixes. Iterate on this process until the example runs smoothly.
   
   - List any errors encountered
   - For each error, propose a fix
   - Note any successful changes made
   </thought_process>

8. Final review:
   <thought_process>
   Review the entire example to ensure it meets the following criteria:
   - Demonstrates the new technology effectively
   - Is simple and easy to understand
   - Includes clear, concise documentation and comments
   - Can be easily cloned and run by users with minimal steps
   - Uses the most recent version of the product
   - Optimizes for ease of understanding and use
   
   For each criterion, rate the example on a scale of 1-5 and provide a brief justification:
   1. [Criterion]: [Rating] - [Justification]
   2. [Criterion]: [Rating] - [Justification]
   ...
   </thought_process>

After completing these steps, present your final example files using the format shown in step 6. Ensure that your README.md file includes clear instructions for setup, usage, and any customization options.

Remember, the key is to create an example that is both informative and easy to use. Prioritize clarity and simplicity in both the code and documentation.

Examples for reference:

<examples>

<example_1>
<files>
<fpath_main.py>import numpy as np\narray = np.array([1, 2, 3])\n{product_name}.interact_with(array)</fpath_main.py>

<fpath_README.md>#Numpy guide\nThis is an example of how to use numpy to create an array, and then properly link said array to {product_name}.\n## Installation\n```bash\npip install -r requirements.txt\n```\n## Usage\n```bash\npython main.py\n```The python version at the time of this example being created is 3.12.1</fpath_README.md>

<fpath_requirements.txt>{product_name}==0.0.1 # all libraries are most up to date as of 2025-01-01\nnumpy==2.2.1</fpath_requirements.txt>
</files>
</example_1>

<example_2>
<files>
<fpath_main.py>from anthropic import Anthropic
from langchain.chains import LLMChain
from langchain_anthropic import AnthropicLLM
from utils import create_prompt_template

# Initialize Anthropic client
anthropic = Anthropic()

# Create LangChain components
llm = AnthropicLLM(model="claude-2")
prompt = create_prompt_template()
chain = LLMChain(llm=llm, prompt=prompt)

# Run chain and get response
response = chain.run(question="What is the meaning of life?")

# Use {product_name} to process the response
processed = {product_name}.use(response)
print(f"Processed response: {{processed}}")</fpath_main.py>

<fpath_utils.py>from langchain.prompts import PromptTemplate

def create_prompt_template():
    """Creates a reusable prompt template for the LLM chain"""
    template = """Question: {{question}}
    
    Please provide a thoughtful response to this question.
    
    Answer:"""
    
    return PromptTemplate(
        input_variables=["question"],
        template=template
    )</fpath_utils.py>

<fpath_README.md># Anthropic + LangChain Integration Example

This example demonstrates how to use {product_name} with Anthropic's Claude model via LangChain.

## Installation

```bash
pip install -r requirements.txt
```
The python version at the time of this example being created is 3.12.1

## Usage

```bash
python main.py
```</fpath_README.md>

<fpath_requirements.txt>{product_name}==0.0.1 # all libraries are most up to date as of 2025-01-01\nlangchain==0.3.13\nlangchain-anthropic==0.3.1\nantropic==0.42.0</fpath_requirements.txt>
</files>
</example_2>

<example_3>
<files>
<fpath_main.py>from {product_name} import WebCrawler
from pydantic import BaseModel
from typing import List

class NewsItem(BaseModel):
    title: str
    url: str
    author: str
    rank: str
    upvotes: str

# Initialize crawler with simple configuration
crawler = WebCrawler()
data = crawler.scrape("https://news.ycombinator.com", 
    schema=NewsItem,
    max_items=10
)

# Save results to file
for item in data:
    print(f"Found: {item.title} by {item.author}")
</fpath_main.py>

<fpath_README.md># Simple News Crawler Example

This example shows how to use {product_name} to scrape Hacker News with a structured schema.

## Installation
```bash
pip install -r requirements.txt
```

## Usage
```bash
python main.py
```

The python version at the time of this example being created is 3.12.1</README.md>

<fpath_requirements.txt>{product_name}==0.0.1 # all libraries are most up to date as of 2025-01-01
pydantic==2.5.2</fpath_requirements.txt>
</files>
</example_3>

<example_4>
<files>
<fpath_app.py>import {product_name} as ai
from rich.console import Console

console = Console()

def chat_with_colors():
    # Initialize AI with colorful output
    assistant = ai.Assistant(
        style="creative",
        output_format="markdown"
    )
    
    console.print("[bold green]Ask me anything![/bold green]")
    
    while True:
        user_input = input("> ")
        if user_input.lower() == "exit":
            break
            
        response = assistant.generate(
            prompt=user_input,
            max_tokens=100
        )
        
        console.print(f"[blue]{response}[/blue]")
</fpath_app.py>

<fpath_README.md># Colorful CLI Chat Example

A simple CLI chat application using {product_name} with colorful output.

## Installation
```bash
pip install -r requirements.txt
```

## Usage
```bash
python app.py
```

Type 'exit' to quit the application.

The python version at the time of this example being created is 3.12.1</fpath_README.md>

<fpath_requirements.txt>{product_name}==0.0.1 # all libraries are most up to date as of 2025-01-01
rich==13.7.0</fpath_requirements.txt>
</files>
</example_4>

<example_5>
<files>
<fpath_app.ts>import { Assistant } from '{product_name}';
import chalk from 'chalk';
import * as readline from 'readline';

// Create readline interface for CLI input/output
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

async function chatWithColors() {
    // Initialize AI with colorful output
    const assistant = new Assistant({
        style: 'creative',
        outputFormat: 'markdown'
    });

    console.log(chalk.green.bold('Ask me anything!'));

    // Create recursive prompt function
    const askQuestion = async () => {
        rl.question('> ', async (userInput: string) => {
            if (userInput.toLowerCase() === 'exit') {
                rl.close();
                return;
            }

            try {
                const response = await assistant.generate({
                    prompt: userInput,
                    maxTokens: 100
                });
                
                console.log(chalk.blue(response));
                askQuestion(); // Continue the conversation
            } catch (error) {
                console.error(chalk.red('Error:', error));
                askQuestion();
            }
        });
    };

    await askQuestion();
}

chatWithColors().catch(console.error);</fpath_app.ts>

<fpath_package.json>{
    "name": "colorful-cli-chat",
    "version": "1.0.0",
    "description": "A simple CLI chat application using {product_name} with colorful output",
    "main": "dist/app.js",
    "scripts": {
        "build": "tsc",
        "start": "node dist/app.js",
        "dev": "ts-node app.ts"
    },
    "dependencies": {
        "{product_name}": "^0.0.1",
        "chalk": "^4.1.2"
    },
    "devDependencies": {
        "@types/node": "^20.11.0",
        "ts-node": "^10.9.2",
        "typescript": "^5.3.3"
    }
}</fpath_package.json>

<fpath_tsconfig.json>{
    "compilerOptions": {
        "target": "ES2020",
        "module": "commonjs",
        "outDir": "./dist",
        "rootDir": "./",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
    },
    "include": ["*.ts"],
    "exclude": ["node_modules", "dist"]
}</fpath_tsconfig.json>

<fpath_README.md># Colorful CLI Chat Example (TypeScript)

A simple CLI chat application using {product_name} with colorful output, written in TypeScript.

## Prerequisites
- Node.js (v16 or higher)
- npm or yarn

## Installation

```bash
npm install
```

## Usage

```bash
npm run dev
```

Type 'exit' to quit the application.

The python version at the time of this example being created is 3.12.1</fpath_README.md> 
</files>
</example_5>

</examples>
